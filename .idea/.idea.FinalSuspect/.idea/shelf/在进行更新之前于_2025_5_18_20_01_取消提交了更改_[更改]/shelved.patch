Index: FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/TaskHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections.Generic;\r\nusing FinalSuspect.DataHandling.FinalAntiCheat.Interfaces;\r\nusing Hazel;\r\n\r\nnamespace FinalSuspect.DataHandling.FinalAntiCheat.Handlers.Valid;\r\n\r\n// 1\r\npublic class TaskHandler : IRpcHandler\r\n{\r\n    public List<byte> TargetRpcs =>\r\n    [\r\n        (byte)RpcCalls.CompleteTask\r\n    ];\r\n\r\n    public bool HandleLobby(PlayerControl sender, MessageReader reader,\r\n        ref bool notify, ref string reason, ref bool ban)\r\n    {\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/TaskHandler.cs b/FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/TaskHandler.cs
--- a/FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/TaskHandler.cs	(revision 4d5b5255da392b3ff4592736d0bda65e2a975166)
+++ b/FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/TaskHandler.cs	(date 1747540631169)
@@ -1,5 +1,6 @@
 using System.Collections.Generic;
 using FinalSuspect.DataHandling.FinalAntiCheat.Interfaces;
+using FinalSuspect.Modules.Core.Game;
 using Hazel;
 
 namespace FinalSuspect.DataHandling.FinalAntiCheat.Handlers.Valid;
@@ -17,4 +18,14 @@
     {
         return true;
     }
+
+    public bool HandleGame_InTask(PlayerControl sender, MessageReader reader, ref bool notify, ref string reason, ref bool ban)
+    {
+        return sender.IsImpostor();
+    }
+
+    public bool HandleGame_InMeeting(PlayerControl sender, MessageReader reader, ref bool notify, ref string reason, ref bool ban)
+    {
+        return true;
+    }
 }
\ No newline at end of file
Index: FinalSuspect/Modules/Features/CheckingandBlocking/RPC.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing System.Threading.Tasks;\r\nusing FinalSuspect.Helpers;\r\nusing FinalSuspect.Modules.Core.Game;\r\nusing FinalSuspect.Patches.Game_Vanilla;\r\nusing FinalSuspect.Patches.System;\r\nusing Hazel;\r\nusing InnerNet;\r\n\r\nnamespace FinalSuspect.Modules.Features.CheckingandBlocking;\r\n\r\npublic enum Sounds\r\n{\r\n    KillSound,\r\n    TaskComplete,\r\n    TaskUpdateSound,\r\n    ImpTransform,\r\n    Yeehawfrom,\r\n}\r\n\r\n[HarmonyPatch]\r\ninternal class RPCHandlerPatch\r\n{\r\n    public static IEnumerable<MethodBase> TargetMethods()\r\n    {\r\n        return (from type in typeof(InnerNetObject).Assembly.GetTypes() where typeof(InnerNetObject).IsAssignableFrom(type) && !type.IsAbstract select type.GetMethod(\"HandleRpc\", BindingFlags.Public | BindingFlags.Instance) into method where method != null && method.GetBaseDefinition() != method select method).Cast<MethodBase>();\r\n    }\r\n    \r\n    public static bool Prefix(InnerNetObject __instance, [HarmonyArgument(0)] ref byte callId,\r\n        [HarmonyArgument(1)] MessageReader reader)\r\n    {\r\n        if (!__instance) return true;\r\n        var player = XtremePlayerData.AllPlayerData.FirstOrDefault(x => __instance.OwnerId == x.Player.OwnerId)?.Player;\r\n        if (!player) return true;\r\n        if (OnPlayerLeftPatch.ClientsProcessed.Contains(player.PlayerId)) return false;\r\n\r\n        Info($\"{player.Data?.PlayerId}\" +\r\n             $\"({player.Data?.PlayerName})\" +\r\n             $\"{(player.IsHost() ? \"Host\" : \"\")}\" +\r\n             $\":{callId}({RPC.GetRpcName(callId)})\",\r\n            \"ReceiveRPC\");\r\n        \r\n        if (XtremePlayerData.AllPlayerData.Any(data => data.PlayerId == player.Data?.PlayerId))\r\n            if (ReceiveRpc(player, callId, reader, out var notify, out var reason, out var ban))\r\n            {\r\n                if (!player.IsLocalPlayer())\r\n                {\r\n                    player.MarkAsCheater();\r\n                }\r\n\r\n                if (AmongUsClient.Instance.AmHost)\r\n                {\r\n                    KickPlayer(player.PlayerId, ban, reason);\r\n                    WarnHost();\r\n                    if (notify)\r\n                        NotificationPopperPatch.NotificationPop\r\n                        (string.Format(GetString(\"Warning.InvalidSlothRPC\"), player.GetRealName(),\r\n                            $\"{callId}({RPC.GetRpcName(callId)})\"));\r\n                }\r\n                else if (notify)\r\n                    NotificationPopperPatch.NotificationPop\r\n                    (string.Format(GetString(\"Warning.InvalidSlothRPC_NotHost\"), player.GetRealName(),\r\n                        $\"{callId}({RPC.GetRpcName(callId)})\"));\r\n\r\n                return false;\r\n            }\r\n\r\n        var subReader = MessageReader.Get(reader);\r\n        var rpcType = (RpcCalls)callId;\r\n\r\n\r\n        switch (rpcType)\r\n        {\r\n            case RpcCalls.CheckName: //CheckNameRPC\r\n                var name = subReader.ReadString();\r\n                Info(\"RPC Check Name For Player: \" + name, \"CheckName\");\r\n                if (player.IsHost())\r\n                    Main.HostNickName = name;\r\n                if (XtremePlayerData.AllPlayerData.All(data => data.PlayerId != player.PlayerId))\r\n                    XtremePlayerData.CreateDataFor(player, name);\r\n                break;\r\n            case RpcCalls.SetName: //SetNameRPC\r\n                subReader.ReadUInt32();\r\n                name = subReader.ReadString();\r\n                Info(\"RPC Set Name For Player: \" + player.GetNameWithRole() + \" => \" + name, \"SetName\");\r\n                break;\r\n            case RpcCalls.SendChat: // Free chat\r\n                var text = subReader.ReadString();\r\n                Info($\"{player.GetNameWithRole().RemoveHtmlTags()}:{text.RemoveHtmlTags()}\", \"ReceiveChat\");\r\n                break;\r\n            case RpcCalls.SendQuickChat:\r\n                Info($\"{player.GetNameWithRole().RemoveHtmlTags()}:Some message from quick chat\", \"ReceiveChat\");\r\n                break;\r\n            case RpcCalls.StartMeeting:\r\n                var p = GetPlayerById(subReader.ReadByte());\r\n                Info($\"{player.GetNameWithRole()} => {p?.GetNameWithRole() ?? \"null\"}\", \"StartMeeting\");\r\n                break;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public static void Postfix(InnerNetObject __instance, [HarmonyArgument(0)] byte callId,\r\n        [HarmonyArgument(1)] MessageReader reader)\r\n    {\r\n        if (!__instance) return;\r\n        // 仅通过PlayerControl发送\r\n        var netId = __instance.NetId;\r\n        var player = XtremePlayerData.AllPlayerData.FirstOrDefault(x => x.NetId == netId)?.Player;\r\n        if (!player) return;\r\n        \r\n        var rpcType = (RpcCalls)callId;\r\n        switch (rpcType)\r\n        {\r\n            case RpcCalls.CancelPet:\r\n                try\r\n                {\r\n                    var version = Version.Parse(reader.ReadString());\r\n                    var tag = reader.ReadString();\r\n                    var forkId = reader.ReadString();\r\n\r\n                    XtremeGameData.PlayerVersion.playerVersion[player.PlayerId] =\r\n                        new XtremeGameData.PlayerVersion(version, tag, forkId);\r\n\r\n                    if (!XtremeGameData.PlayerVersion.playerVersion.ContainsKey(player.PlayerId))\r\n                        RPC.RpcVersionCheck();\r\n\r\n                    if (Main.VersionCheat.Value && AmongUsClient.Instance.AmHost)\r\n                        XtremeGameData.PlayerVersion.playerVersion[player.PlayerId] =\r\n                            XtremeGameData.PlayerVersion.playerVersion[0];\r\n\r\n                    // Kick Unmached Player Start\r\n                    /*if (AmongUsClient.Instance.AmHost && tag != $\"{Main.GitCommit}({Main.GitBranch})\")\r\n                    {\r\n                        if (forkId != Main.ForkId)\r\n                            _ = new LateTask(() =>\r\n                            {\r\n                                if (__instance?.Data?.Disconnected is not null and not true)\r\n                                {\r\n                                    var msg = string.Format(GetString(\"KickBecauseDiffrentVersionOrMod\"), __instance?.Data?.PlayerName);\r\n                                    Warn(msg, \"Version Kick\");\r\n                                    NotificationPopperPatch.NotificationPop(msg);\r\n                                    KickPlayer(__instance.GetClientId(), false, \"ModVersionIncorrect\");\r\n                                }\r\n                            }, 5f, \"Kick\");\r\n                    }*/\r\n                }\r\n                catch\r\n                {\r\n                    /* ignored */\r\n                }\r\n\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n[HarmonyPatch(typeof(PlayerPhysics), nameof(PlayerPhysics.HandleRpc))]\r\ninternal class PlayerPhysicsRPCHandlerPatch\r\n{\r\n    public static bool Prefix(PlayerPhysics __instance, [HarmonyArgument(0)] ref byte callId,\r\n        [HarmonyArgument(1)] MessageReader reader)\r\n    {\r\n        if (!__instance) return true;\r\n        var player = __instance.myPlayer;\r\n        if (OnPlayerLeftPatch.ClientsProcessed.Contains(player.PlayerId)) return false;\r\n        //Info($\"{player.Data?.PlayerId}\" +\r\n        //     $\"({player.Data?.PlayerName})\" +\r\n        //     $\"{(player.IsHost() ? \"Host\" : \"\")}\" +\r\n        //     $\":{callId}({RPC.GetRpcName(callId)})\",\r\n        //    \"ReceiveRPC\");\r\n\r\n        if (XtremePlayerData.AllPlayerData.All(data => data.PlayerId != player.Data?.PlayerId)) return true;\r\n        if (!ReceiveRpc(player, callId, reader, out var notify, out var reason, out var ban)) return true;\r\n        if (!player.IsLocalPlayer())\r\n        {\r\n            player.MarkAsCheater();\r\n        }\r\n\r\n        if (AmongUsClient.Instance.AmHost)\r\n        {\r\n            KickPlayer(player.PlayerId, ban, reason);\r\n            WarnHost();\r\n            if (notify)\r\n                NotificationPopperPatch.NotificationPop\r\n                (string.Format(GetString(\"Warning.InvalidSlothRPC\"), player.GetRealName(),\r\n                    $\"{callId}({RPC.GetRpcName(callId)})\"));\r\n        }\r\n        else if (notify)\r\n            NotificationPopperPatch.NotificationPop\r\n            (string.Format(GetString(\"Warning.InvalidSlothRPC_NotHost\"), player.GetRealName(),\r\n                $\"{callId}({RPC.GetRpcName(callId)})\"));\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\ninternal static class RPC\r\n{\r\n    public static async void RpcVersionCheck()\r\n    {\r\n        try\r\n        {\r\n            while (!PlayerControl.LocalPlayer) await Task.Delay(500);\r\n            if (!Main.VersionCheat.Value)\r\n            {\r\n                var writer = AmongUsClient.Instance.StartRpc(PlayerControl.LocalPlayer.NetId, (byte)RpcCalls.CancelPet);\r\n                writer.Write(Main.PluginVersion);\r\n                writer.Write($\"{Main.GitCommit}({Main.GitBranch})\");\r\n                writer.Write(Main.ForkId);\r\n                writer.EndMessage();\r\n            }\r\n\r\n            XtremeGameData.PlayerVersion.playerVersion[PlayerControl.LocalPlayer.PlayerId] =\r\n                new XtremeGameData.PlayerVersion(Main.PluginVersion, $\"{Main.GitCommit}({Main.GitBranch})\",\r\n                    Main.ForkId);\r\n        }\r\n        catch\r\n        {\r\n            /* ignored */\r\n        }\r\n    }\r\n\r\n    public static void SendRpcLogger(uint targetNetId, byte callId, int targetClientId = -1)\r\n    {\r\n        if (!DebugModeManager.AmDebugger) return;\r\n        var rpcName = GetRpcName(callId);\r\n        var from = targetNetId.ToString();\r\n        var target = targetClientId.ToString();\r\n        try\r\n        {\r\n            target = targetClientId < 0 ? \"All\" : AmongUsClient.Instance.GetClient(targetClientId).PlayerName;\r\n            from = Main.AllPlayerControls.FirstOrDefault(c => c.NetId == targetNetId)?.Data?.PlayerName;\r\n        }\r\n        catch\r\n        {\r\n            /* ignored */\r\n        }\r\n\r\n        Info($\"FromNetID:{targetNetId}({from}) TargetClientID:{targetClientId}({target}) CallID:{callId}({rpcName})\",\r\n            \"SendRPC\");\r\n    }\r\n\r\n    public static string GetRpcName(byte callId)\r\n    {\r\n        string rpcName;\r\n        if ((rpcName = Enum.GetName(typeof(RpcCalls), callId)) == null)\r\n            rpcName = callId + \" 无效\";\r\n        return rpcName;\r\n    }\r\n}\r\n\r\n[HarmonyPatch(typeof(InnerNetClient), nameof(InnerNetClient.StartRpc))]\r\ninternal class StartRpcPatch\r\n{\r\n    public static void Prefix([HarmonyArgument(0)] uint targetNetId, [HarmonyArgument(1)] byte callId)\r\n    {\r\n        RPC.SendRpcLogger(targetNetId, callId);\r\n    }\r\n}\r\n\r\n[HarmonyPatch(typeof(InnerNetClient), nameof(InnerNetClient.StartRpcImmediately))]\r\ninternal class StartRpcImmediatelyPatch\r\n{\r\n    public static void Prefix([HarmonyArgument(0)] uint targetNetId, [HarmonyArgument(1)] byte callId,\r\n        [HarmonyArgument(3)] int targetClientId = -1)\r\n    {\r\n        RPC.SendRpcLogger(targetNetId, callId, targetClientId);\r\n    }\r\n}\r\n\r\n[HarmonyPatch(typeof(MessageReader), nameof(MessageReader.ReadUInt16))]\r\n[HarmonyPatch(typeof(MessageReader), nameof(MessageReader.ReadPackedUInt32))]\r\n[HarmonyPriority(Priority.First)]\r\ninternal class HazelPatch\r\n{\r\n    public static bool Prefix(MessageReader __instance)\r\n    {\r\n        return __instance.Length > 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FinalSuspect/Modules/Features/CheckingandBlocking/RPC.cs b/FinalSuspect/Modules/Features/CheckingandBlocking/RPC.cs
--- a/FinalSuspect/Modules/Features/CheckingandBlocking/RPC.cs	(revision 4d5b5255da392b3ff4592736d0bda65e2a975166)
+++ b/FinalSuspect/Modules/Features/CheckingandBlocking/RPC.cs	(date 1747539491514)
@@ -26,81 +26,146 @@
 {
     public static IEnumerable<MethodBase> TargetMethods()
     {
-        return (from type in typeof(InnerNetObject).Assembly.GetTypes() where typeof(InnerNetObject).IsAssignableFrom(type) && !type.IsAbstract select type.GetMethod("HandleRpc", BindingFlags.Public | BindingFlags.Instance) into method where method != null && method.GetBaseDefinition() != method select method).Cast<MethodBase>();
+        return (from type in typeof(InnerNetObject).Assembly.GetTypes() where typeof(InnerNetObject).IsAssignableFrom(type) && !type.IsAbstract select type.GetMethod("HandleRpc", BindingFlags.Public | BindingFlags.Instance) into method where method != null && method.GetBaseDefinition() != method select method);
     }
     
-    public static bool Prefix(InnerNetObject __instance, [HarmonyArgument(0)] ref byte callId,
-        [HarmonyArgument(1)] MessageReader reader)
+    public static bool Prefix(InnerNetObject __instance, [HarmonyArgument(0)] ref byte callId, [HarmonyArgument(1)] MessageReader reader)
     {
         if (!__instance) return true;
-        var player = XtremePlayerData.AllPlayerData.FirstOrDefault(x => __instance.OwnerId == x.Player.OwnerId)?.Player;
+
+        var player = GetPlayerFromInstance(__instance, reader);
         if (!player) return true;
+
         if (OnPlayerLeftPatch.ClientsProcessed.Contains(player.PlayerId)) return false;
 
-        Info($"{player.Data?.PlayerId}" +
-             $"({player.Data?.PlayerName})" +
-             $"{(player.IsHost() ? "Host" : "")}" +
-             $":{callId}({RPC.GetRpcName(callId)})",
-            "ReceiveRPC");
-        
+        HandleCheatDetection(player, callId, reader);
+
+        var rpcType = (RpcCalls)callId;
+        ProcessRpc(rpcType, player, reader);
+
+        return true;
+    }
+
+    // 新增获取玩家的方法
+    private static PlayerControl GetPlayerFromInstance(InnerNetObject instance, MessageReader reader)
+    {
+        var player = XtremePlayerData.AllPlayerData.FirstOrDefault(x => instance.OwnerId == x.Player.OwnerId)?.Player;
+        if (player) return player;
+
+        try
+        {
+            var sr = MessageReader.Get(reader);
+            player = sr.ReadNetObject<PlayerControl>();
+        }
+        catch
+        {
+            /* ignored */
+        }
+
+        return player;
+    }
+
+    // 处理作弊检测的逻辑
+    private static void HandleCheatDetection(PlayerControl player, byte callId, MessageReader reader)
+    {
+        if (!player.GetCheatData().InComingOverloaded)
+        {
+            Info($"{player.Data?.PlayerId}({player.Data?.PlayerName}){(player.IsHost() ? "Host" : "")}:{callId}({RPC.GetRpcName(callId)})", "ReceiveRPC");
+        }
+
         if (XtremePlayerData.AllPlayerData.Any(data => data.PlayerId == player.Data?.PlayerId))
+        {
             if (ReceiveRpc(player, callId, reader, out var notify, out var reason, out var ban))
             {
-                if (!player.IsLocalPlayer())
-                {
-                    player.MarkAsCheater();
-                }
+                HandleCheater(player, notify, reason, ban, callId);
+                return;
+            }
+        }
+    }
+
+    // 处理作弊者的逻辑
+    private static void HandleCheater(PlayerControl player, bool notify, string reason, bool ban, byte callId)
+    {
+        if (!player.IsLocalPlayer())
+        {
+            player.MarkAsCheater();
+        }
 
-                if (AmongUsClient.Instance.AmHost)
-                {
-                    KickPlayer(player.PlayerId, ban, reason);
-                    WarnHost();
-                    if (notify)
-                        NotificationPopperPatch.NotificationPop
-                        (string.Format(GetString("Warning.InvalidSlothRPC"), player.GetRealName(),
-                            $"{callId}({RPC.GetRpcName(callId)})"));
-                }
-                else if (notify)
-                    NotificationPopperPatch.NotificationPop
-                    (string.Format(GetString("Warning.InvalidSlothRPC_NotHost"), player.GetRealName(),
-                        $"{callId}({RPC.GetRpcName(callId)})"));
-
-                return false;
-            }
+        if (AmongUsClient.Instance.AmHost)
+        {
+            KickPlayer(player.PlayerId, ban, reason);
+            WarnHost();
+            if (notify)
+            {
+                NotificationPopperPatch.NotificationPop(
+                    string.Format(GetString("Warning.InvalidSlothRPC"), player.GetRealName(), $"{callId}({RPC.GetRpcName(callId)})"));
+            }
+        }
+        else if (notify)
+        {
+            NotificationPopperPatch.NotificationPop(
+                string.Format(GetString("Warning.InvalidSlothRPC_NotHost"), player.GetRealName(), $"{callId}({RPC.GetRpcName(callId)})"));
+        }
+    }
 
+    // 处理RPC调用的逻辑
+    private static void ProcessRpc(RpcCalls rpcType, PlayerControl player, MessageReader reader)
+    {
         var subReader = MessageReader.Get(reader);
-        var rpcType = (RpcCalls)callId;
-
 
         switch (rpcType)
         {
-            case RpcCalls.CheckName: //CheckNameRPC
-                var name = subReader.ReadString();
-                Info("RPC Check Name For Player: " + name, "CheckName");
-                if (player.IsHost())
-                    Main.HostNickName = name;
-                if (XtremePlayerData.AllPlayerData.All(data => data.PlayerId != player.PlayerId))
-                    XtremePlayerData.CreateDataFor(player, name);
-                break;
-            case RpcCalls.SetName: //SetNameRPC
-                subReader.ReadUInt32();
-                name = subReader.ReadString();
-                Info("RPC Set Name For Player: " + player.GetNameWithRole() + " => " + name, "SetName");
-                break;
-            case RpcCalls.SendChat: // Free chat
-                var text = subReader.ReadString();
-                Info($"{player.GetNameWithRole().RemoveHtmlTags()}:{text.RemoveHtmlTags()}", "ReceiveChat");
-                break;
-            case RpcCalls.SendQuickChat:
-                Info($"{player.GetNameWithRole().RemoveHtmlTags()}:Some message from quick chat", "ReceiveChat");
-                break;
-            case RpcCalls.StartMeeting:
-                var p = GetPlayerById(subReader.ReadByte());
-                Info($"{player.GetNameWithRole()} => {p?.GetNameWithRole() ?? "null"}", "StartMeeting");
-                break;
-        }
-
-        return true;
+            case RpcCalls.CheckName:
+                HandleCheckNameRpc(player, subReader);
+                break;
+            case RpcCalls.SetName:
+                HandleSetNameRpc(player, subReader);
+                break;
+            case RpcCalls.SendChat:
+                HandleSendChatRpc(player, subReader);
+                break;
+            case RpcCalls.SendQuickChat:
+                HandleSendQuickChatRpc(player);
+                break;
+            case RpcCalls.StartMeeting:
+                HandleStartMeetingRpc(player, subReader);
+                break;
+        }
+    }
+
+    // 具体处理各种RPC调用的方法
+    private static void HandleCheckNameRpc(PlayerControl player, MessageReader reader)
+    {
+        var name = reader.ReadString();
+        Info("RPC Check Name For Player: " + name, "CheckName");
+        if (player.IsHost())
+            Main.HostNickName = name;
+        if (XtremePlayerData.AllPlayerData.All(data => data.PlayerId != player.PlayerId))
+            XtremePlayerData.CreateDataFor(player, name);
+    }
+
+    private static void HandleSetNameRpc(PlayerControl player, MessageReader reader)
+    {
+        reader.ReadUInt32();
+        var name = reader.ReadString();
+        Info("RPC Set Name For Player: " + player.GetNameWithRole() + " => " + name, "SetName");
+    }
+
+    private static void HandleSendChatRpc(PlayerControl player, MessageReader reader)
+    {
+        var text = reader.ReadString();
+        Info($"{player.GetNameWithRole().RemoveHtmlTags()}:{text.RemoveHtmlTags()}", "ReceiveChat");
+    }
+
+    private static void HandleSendQuickChatRpc(PlayerControl player)
+    {
+        Info($"{player.GetNameWithRole().RemoveHtmlTags()}:Some message from quick chat", "ReceiveChat");
+    }
+
+    private static void HandleStartMeetingRpc(PlayerControl player, MessageReader reader)
+    {
+        var p = GetPlayerById(reader.ReadByte());
+        Info($"{player.GetNameWithRole()} => {p?.GetNameWithRole() ?? "null"}", "StartMeeting");
     }
 
     public static void Postfix(InnerNetObject __instance, [HarmonyArgument(0)] byte callId,
@@ -158,46 +223,6 @@
     }
 }
 
-[HarmonyPatch(typeof(PlayerPhysics), nameof(PlayerPhysics.HandleRpc))]
-internal class PlayerPhysicsRPCHandlerPatch
-{
-    public static bool Prefix(PlayerPhysics __instance, [HarmonyArgument(0)] ref byte callId,
-        [HarmonyArgument(1)] MessageReader reader)
-    {
-        if (!__instance) return true;
-        var player = __instance.myPlayer;
-        if (OnPlayerLeftPatch.ClientsProcessed.Contains(player.PlayerId)) return false;
-        //Info($"{player.Data?.PlayerId}" +
-        //     $"({player.Data?.PlayerName})" +
-        //     $"{(player.IsHost() ? "Host" : "")}" +
-        //     $":{callId}({RPC.GetRpcName(callId)})",
-        //    "ReceiveRPC");
-
-        if (XtremePlayerData.AllPlayerData.All(data => data.PlayerId != player.Data?.PlayerId)) return true;
-        if (!ReceiveRpc(player, callId, reader, out var notify, out var reason, out var ban)) return true;
-        if (!player.IsLocalPlayer())
-        {
-            player.MarkAsCheater();
-        }
-
-        if (AmongUsClient.Instance.AmHost)
-        {
-            KickPlayer(player.PlayerId, ban, reason);
-            WarnHost();
-            if (notify)
-                NotificationPopperPatch.NotificationPop
-                (string.Format(GetString("Warning.InvalidSlothRPC"), player.GetRealName(),
-                    $"{callId}({RPC.GetRpcName(callId)})"));
-        }
-        else if (notify)
-            NotificationPopperPatch.NotificationPop
-            (string.Format(GetString("Warning.InvalidSlothRPC_NotHost"), player.GetRealName(),
-                $"{callId}({RPC.GetRpcName(callId)})"));
-
-        return false;
-    }
-}
-
 internal static class RPC
 {
     public static async void RpcVersionCheck()
@@ -281,4 +306,4 @@
     {
         return __instance.Length > 0;
     }
-}
+}
\ No newline at end of file
Index: FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/VentHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections.Generic;\r\nusing AmongUs.GameOptions;\r\nusing FinalSuspect.DataHandling.FinalAntiCheat.Interfaces;\r\nusing FinalSuspect.Modules.Core.Game;\r\nusing Hazel;\r\n\r\nnamespace FinalSuspect.DataHandling.FinalAntiCheat.Handlers.Valid;\r\n\r\n// 19, 20\r\npublic class VentHandler : IRpcHandler\r\n{\r\n    public List<byte> TargetRpcs =>\r\n    [\r\n        (byte)RpcCalls.EnterVent,\r\n        (byte)RpcCalls.ExitVent,\r\n    ];\r\n\r\n    public bool HandleAll(PlayerControl sender, MessageReader reader,\r\n        ref bool notify, ref string reason, ref bool ban)\r\n    {\r\n        return !sender.IsImpostor() && sender.GetRoleType() != RoleTypes.Engineer;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/VentHandler.cs b/FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/VentHandler.cs
--- a/FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/VentHandler.cs	(revision 4d5b5255da392b3ff4592736d0bda65e2a975166)
+++ b/FinalSuspect/DataHandling/FinalAntiCheat/Handlers/Valid/VentHandler.cs	(date 1747538115531)
@@ -18,6 +18,6 @@
     public bool HandleAll(PlayerControl sender, MessageReader reader,
         ref bool notify, ref string reason, ref bool ban)
     {
-        return !sender.IsImpostor() && sender.GetRoleType() != RoleTypes.Engineer;
+        return !sender.IsImpostor() && sender.GetRoleType() is not RoleTypes.Engineer and not RoleTypes.CrewmateGhost and not RoleTypes.GuardianAngel;
     }
 }
\ No newline at end of file
Index: FinalSuspect/DataHandling/FinalAntiCheat/Core/PlayerCheatData.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing FinalSuspect.Modules.Core.Game;\r\nusing FinalSuspect.Modules.Features.CheckingandBlocking;\r\nusing FinalSuspect.Patches.Game_Vanilla;\r\nusing InnerNet;\r\n\r\nnamespace FinalSuspect.DataHandling.FinalAntiCheat.Core;\r\n\r\npublic class PlayerCheatData\r\n{\r\n    public bool IsSuspectCheater { get; private set; }\r\n    public ClientData ClientData { get; }\r\n    public string FriendCode => ClientData.FriendCode;\r\n    public string Puid => ClientData.GetHashedPuid();\r\n\r\n    private readonly PlayerControl _player;\r\n\r\n    public PlayerCheatData(PlayerControl player)\r\n    {\r\n        _player = player;\r\n        ClientData = _player.GetClient();\r\n    }\r\n\r\n    public void MarkAsCheater() => IsSuspectCheater = true;\r\n\r\n    private void HandleLobbyPosition()\r\n    {\r\n        if (!IsLobby) return;\r\n        var pos = _player.GetTruePosition();\r\n        if (pos.x > 3.5f || pos.x < -3.5f || pos.y > 4f || pos.y < -1f)\r\n            MarkAsCheater();\r\n    }\r\n\r\n    private void HandleBan()\r\n    {\r\n        if (ClientData.IsFACPlayer() || ClientData.IsBannedPlayer())\r\n            MarkAsCheater();\r\n    }\r\n\r\n    private void HandleSuspectCheater()\r\n    {\r\n        if (Main.DisableFAC.Value || !IsSuspectCheater ||\r\n            _lastHandleCheater != -1 && _lastHandleCheater + 1 >= GetTimeStamp()) return;\r\n        _lastHandleCheater = GetTimeStamp();\r\n        if (!AmongUsClient.Instance.AmHost)\r\n        {\r\n            NotificationPopperPatch.NotificationPop(string.Format(GetString(\"Warning.Cheater_NotHost\"),\r\n                _player.GetDataName()));\r\n            return;\r\n        }\r\n\r\n        NotificationPopperPatch.NotificationPop(string.Format(GetString(\"Warning.Cheater\"),\r\n            _player.GetDataName()));\r\n        KickPlayer(_player.PlayerId, false, \"Suspect Cheater\");\r\n    }\r\n\r\n    private readonly Dictionary<byte, RpcRecord> _rpcRecords = new();\r\n\r\n    private struct RpcRecord\r\n    {\r\n        public long LastReceivedTime;\r\n        public int Count;\r\n    }\r\n\r\n    public bool HandleIncomingRpc(byte rpcId)\r\n    {\r\n        var currentTime = GetCurrentTimestamp();\r\n\r\n        if (_rpcRecords.TryGetValue(rpcId, out var record))\r\n        {\r\n            var timeDiff = currentTime - record.LastReceivedTime;\r\n\r\n            if (timeDiff > 1000)\r\n            {\r\n                record.Count = 1;\r\n                record.LastReceivedTime = currentTime;\r\n            }\r\n            else\r\n            {\r\n                record.Count++;\r\n\r\n                if (record.Count > 10)\r\n                {\r\n                    MarkAsCheater();\r\n                    record.Count = 0;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            _rpcRecords[rpcId] = record;\r\n        }\r\n        else\r\n        {\r\n            _rpcRecords[rpcId] = new RpcRecord\r\n            {\r\n                LastReceivedTime = currentTime,\r\n                Count = 1\r\n            };\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private static long GetCurrentTimestamp()\r\n    {\r\n        return DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond;\r\n    }\r\n\r\n    public void HandleCheatData()\r\n    {\r\n        try\r\n        {\r\n            HandleBan();\r\n            HandleLobbyPosition();\r\n            HandleSuspectCheater();\r\n        }\r\n        catch\r\n        {\r\n            /* ignored */\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FinalSuspect/DataHandling/FinalAntiCheat/Core/PlayerCheatData.cs b/FinalSuspect/DataHandling/FinalAntiCheat/Core/PlayerCheatData.cs
--- a/FinalSuspect/DataHandling/FinalAntiCheat/Core/PlayerCheatData.cs	(revision 4d5b5255da392b3ff4592736d0bda65e2a975166)
+++ b/FinalSuspect/DataHandling/FinalAntiCheat/Core/PlayerCheatData.cs	(date 1747537969018)
@@ -13,6 +13,7 @@
     public ClientData ClientData { get; }
     public string FriendCode => ClientData.FriendCode;
     public string Puid => ClientData.GetHashedPuid();
+    public bool InComingOverloaded { get; private set; }
 
     private readonly PlayerControl _player;
 
@@ -80,10 +81,11 @@
             {
                 record.Count++;
 
-                if (record.Count > 10)
+                if (record.Count > 20)
                 {
                     MarkAsCheater();
                     record.Count = 0;
+                    InComingOverloaded = true;
                     return true;
                 }
             }
